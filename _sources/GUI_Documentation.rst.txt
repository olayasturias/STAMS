**********************************
Introduction
**********************************

==================================
What is STAMS GUI?
==================================
STAMS GUI is the user inteface used with all the devices from STAMS project (see `STAMS website.)
<http://stams-rfcs.eu/>`_.

It will allow easier manoeuvre of the different devices, and convenient visualization of the sensor readings.

========================================
Which devices does STAMS GUI integrate?
========================================

Different devices need to be monitorized during their deployment. This User Interface will provide a different
interface for two of them.
The three Modules used in this project can be seen in the following picture:

.. image:: ../source/devices.png

Below, there is a table with the different devices integrated with the GUI, the sensor input to be visualized
and the control commands that the user will be allowed to send. Additionnally, the developing state of the GUI
for each device is indicated

+--------------------------+-----------------------+-----------------------------+--------------------+
|Device                    |Visualization tools    |Control Commands             | Developing state   |
+==========================+=======================+=============================+====================+
| | Reference Point        | | Camera              | | Teleoperation/ Autonomous |    On develop      |
| | Installation Module    | | Pose                | | (6 DOF)                   |                    |
+--------------------------+-----------------------+-----------------------------+--------------------+
| | Ultrasonic Inspection  | | Profiler Scan       | | UP/DOWN                   |    On develop      |
| | Module                 | | Distance to obstacle|                             |                    |
+--------------------------+-----------------------+-----------------------------+--------------------+

.. image:: ../source/DSC05005.JPG

--------------------------------------
The Ultrasonic Inspection Module
--------------------------------------

The Ultrasonic Inspection Module contains a Profiling Sonar, a collision avoidance Sonar and an Anti-Collision camera.
This forms the PCAS (Profiling and Collision Avoidance Sub-Module), which is also integrated in the Reference Points Installation Module.

.. image:: ../source/pcas.png


.. image:: ../source/uim.png


-------------------------------------
Reference Points Installation Module
-------------------------------------
The RPIM is formed by the previously mentioned PCAS and an underwater Robot for sensor fixation against the Shaft wall.

.. image:: ../source/rpim.jpg


**********************************
Tutorials
**********************************
========================================
Installing ROS Kinetic
========================================

Note: ROS Kinetic works in Ubuntu 16.04.

-----------------------------------------
Configure your Ubuntu repositories
-----------------------------------------
Configure your Ubuntu repositories to allow "restricted," "universe," and "multiverse."
You can follow the `Ubuntu guide <https://help.ubuntu.com/community/Repositories/Ubuntu>`_ for instructions on doing this.

-----------------------------------------
Setup your sources.list
-----------------------------------------

Setup your computer to accept software from packages.ros.org::

  sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'

-----------------------------------------
Set up your keys
-----------------------------------------
Set up your keys::

  sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116

If you experience issues connecting to the keyserver, you can try substituting hkp://pgp.mit.edu:80 or hkp://keyserver.ubuntu.com:80 in the previous command.

-----------------------------------------
Installation
-----------------------------------------
First, make sure your Debian package index is up-to-date::

  sudo apt update

Now you are  ready to do the Desktop-Full Install: (Recommended) : ROS, rqt, rviz, robot-generic libraries, 2D/3D simulators, navigation and 2D/3D perception::

  sudo apt install ros-kinetic-desktop-full

----------------------------------------
Initialize rosdep
----------------------------------------
Before you can use ROS, you will need to initialize `rosdep`.
`rosdep` enables you to easily install system dependencies for source you want to compile and is required to run some core components in ROS::

  sudo rosdep init
  rosdep update

----------------------------------------
Environment Setup
----------------------------------------
It's convenient if the ROS environment variables are automatically added to your bash session every time a new shell is launched::

  echo "source /opt/ros/kinetic/setup.bash" >> ~/.bashrc
  source ~/.bashrc

----------------------------------------
Dependencies for building packages
----------------------------------------
Up to now you have installed what you need to run the core ROS packages. To create and manage your own ROS workspaces, there are various tools and requirements that are distributed separately.
For example, rosinstall is a frequently used command-line tool that enables you to easily download many source trees for ROS packages with one command.

To install this tool and other dependencies for building ROS packages, run::

  sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential


========================================
Installing Dependencies
========================================
The STAMS packages depend on some Python libraries in order to work.
Before proceeding to the installation of the STAMS packages, we will install those libraries.

First of all, install pip, a tool for easy installing python packages::

  sudo apt install python-pip
  sudo pip install --upgrade pip

Numpy, Scipy and Matplotlib libraries::

  python -m pip install --user numpy scipy matplotlib

Python bindings for Qt4::

  sudo apt update
  sudo apt install python-qt4
  sudo apt install python-qt4-gl

Bitstring, in order to work with binary data::

  sudo pip install bitstring

Pyserial, for serial communication handling::

  sudo apt install python-serial

imutils, which includes a series of OpenCV convenience functions for basic tasks such as translation, rotation, resizing etc::

  sudo pip install imutils

Pyqtgraph, which is an optimized graphics library::

  sudo pip install pyqtgraph

For the camera drivers, we will need GStreamer, which you can install by::

  sudo apt install libgstreamer0.10-dev gstreamer0.10-tools python-qt4-gl libgstreamer-plugins-base0.10-dev libavcodec-dev libavformat-dev libavutil-dev libswscale-dev freeglut3-dev libasound2-dev libxmu-dev libxxf86vm-dev g++ libgl1-mesa-dev libglu1-mesa-dev libraw1394-dev libudev-dev libdrm-dev

And also gscam, a ROS driver for the CCTV camera::

  sudo apt install ros-kinetic-gscam
  rosdep update
  rosdep install gscam

Finally, tmux, which is a very useful tool to manage the terminal::

  sudo apt install tmux


If you notice that there is some missing package when compiling the user interface, please  `notify me. <mailto:sup...@oalvarez@ing.uc3m.es>`_


========================================
Installing the GUI in your computer
========================================


Requisites:

- Having Ubuntu 16.04 as operating system
- Having ROS Kinetic installed. `Online instructions here. <http://wiki.ros.org/kinetic/Installation/Ubuntu>`_
- Having the UWSim simulator installed. `Instructions here. <http://www.irs.uji.es/uwsim/wiki/index.php?title=Installing_UWSim>`_

-----------------------------------------
Preparing the ROS workspace
-----------------------------------------

You must have a catkin workspace in your computer. If case you don't have it, just open a terminal and follow this steps::

  mkdir -p ~/catkin_ws/src
  cd ~/catkin_ws/
  catkin_make

The mkdir command creates a folder called catkin_ws, which has a subfolder called src. The src folder will contain the ROS packages.

With the cd command we are entering into the catkin_ws folder.

Finally, catkin_make runs the workspace (that is, all the source code contained in the src directory).

For more detailed information, `visit this ROS tutorial <http://wiki.ros.org/catkin/Tutorials/create_a_workspace>`_

-----------------------------------------
Download the GUI's source code
-----------------------------------------

First of all, you need to open the terminal and go to the source directory of your catkin workspace::

  cd ~/catkin_ws/src

Now, download the ROS package with the GUI by typing::

  git clone https://github.com/olayasturias/stams_gui

The GUI needs the drivers from the sensors in order to operate. Download them with the following commands::

  git clone https://github.com/olayasturias/tritech_profiler
  git clone https://github.com/olayasturias/valeport_altimeter

It also needs a driver for the BlueROV2 teleoperation::

  git clone https://github.com/patrickelectric/bluerov_ros_playground.git

Now you have the ROS package with the GUI in your source directory. Go back to your catkin workspace, and source your environment::

  cd ~/catkin_ws
  source ./devel/setup.bash

install all ROS dependencies by running::

  rosdep update
  rosdep install stams_gui

And finally build the packages::

  catkin_make


========================================
Launching the GUI
========================================
----------------------------------------
Manually
----------------------------------------

The STAMS GUI is built in ROS, and works as a ROS package.
The first step to follow is open your terminal and go to your catkin workspace::

  cd ~/catkin_ws

Then you must source your environment::

  source ./devel/setup.bash

And now you're ready to launch the GUI. Run the pcas launch when only the pcas is installed, or the rpim with ROV and PCAS::

  roslaunch stams_gui pcas.launch
  roslaunch stams_gui rpim.launch

-----------------------------------------
Automatically with a script
-----------------------------------------
Create a file with the extension .sh (equivalent to a .exe in Windows). Open it with a
text editor and write the following on it:

+----------------------------------+
|                                  |
| #!/bin/bash                      |
|                                  |
| killall -9 rosmaster             |
|                                  |
| killall -9 roscore               |
|                                  |
| cd ~/catkin_ws                   |
|                                  |
| source ./devel/setup.bash        |
|                                  |
| roslaunch stams_gui pcas.launch  |
|                                  |
+----------------------------------+

This executable file now needs executing permission. To do this, open the
terminal (press Ctrl+Alt+T) amd do::
  cd /path/to/target
  chmod +x the_file_name.sh

Now the file is ready to be executed. Double click on it, select "execute in
terminal", and  the GUI will launch!

========================================
Updating the GUI
========================================
There is always something to improve, or something to change!
If you want to update your copy of the software to the last version and make it work in your computer, then you are in the correct section. This procedure can be divided in two steps:

 1. Downloading the code
 2. Compiling it to make it work

 Similarly to the GUI launching, it can be done automatically with a scrip file (.sh).
 The script content is as follows:

+-------------------------------+
|                               |
| #!/bin/bash                   |
|                               |
| SESSION=$USER                 |
|                               |
| cd ~/catkin_ws                |
|                               |
| source ./devel/setup.bash     |
|                               |
| roscd bluerov_ros_playground/ |
|                               |
| git pull origin master        |
|                               |
| roscd tritech_profiler/       |
|                               |
| git pull origin master        |
|                               |
| roscd valeport_altimeter/     |
|                               |
| git pull origin master        |
|                               |
| roscd stams_gui/              |
|                               |
| git pull origin master        |
|                               |
| cd ~/catkin_ws                |
|                               |
| catkin_make                   |
+-------------------------------+

Again, repeat the steps to make it executable::
cd /path/to/target
chmod +x the_file_name.sh

Now the file is ready to be executed. Double click on it, select "execute in
terminal", and  the GUI will launch!

You are ready to execute the software as you always did. However, if any error message appears when executing the catkin_make command, please  `notify me. <mailto:sup...@oalvarez@ing.uc3m.es>`_

========================================
GUI usage
========================================
This GUI has been designed to be modular and work with the following Modules from STAMS:

- The Reference Points Installation Module
- The Ultrasonic Inspection Module

The following windows launch when executing the GUI:

- The PCAS window: it shows information from the Ultrasonic Inspection module and collision avoidance, and also the sensors' selection (since they cannot work concurrently). It is called PCAS tab because it can be used only for the PCAS submodule.

- The RViz window: for sensor visualization, in this case the PointCloud from the Profiling Sonar.

- The rqt_reconfigure window: this tab is for further configuration of the drivers, and it's more meant for developers. Normally it won't need to be used by the average user.

Below it is detailed the information about each of the mentioned windows.

--------------------
PCAS Window
--------------------
The PCAS tab appears by default when launching the pcas user interface.

.. figure:: ../source/PCAStab.png
   :alt: Current aspect of the UI
   :width: 80%

   PCAS tab in the STAMS' GUI .

Form left to right, the following displays appear in the PCAS tab:

  - The image from the collision avoidance camera (if connected).
  - Distance to obstable read from the collision avoidance sonar, depth information read from the whinch, and a record button for the Profiling Sonar data.

On the right of the User Interface, different configuration parameters appear, having in account that there is a serial connection through a sincle wireline, and thus the Profiling Sonar and the Altimeter cannot send information concurrently.




~~~~~~~~~~~~~~~~~~~~~~
Profiling Sonar
~~~~~~~~~~~~~~~~~~~~~~

The Profiling Sonar has the following configuration parameters (the default values should work):

  - The serial port from where it is receiving data.
  - The Power Up checkbox.
  - The Data transmission checkbox.

  .. figure:: ../source/PS.png
     :alt: Current aspect of the UI
     :width: 30%


Selecting the "Power Up" Checkbox, will power up the sensor, and unselecting it will power it off.
Selecting the "Data Transmission" checkbox will make the Profiling Sonar transmit the data through the wireline, while it unselects the "Data Transmission" checkbox of the Altimeter.




~~~~~~~~~~~~~~~~~~~~~~
Sonar Altimeter
~~~~~~~~~~~~~~~~~~~~~~

The Sonar Altimeter parameters are similar to the Profiling Sonar's:

  - The serial port from where it is receiving data.
  - The Power Up checkbox.
  - The Data transmission checkbox.

  .. figure:: ../source/altimeter.png
     :alt: Current aspect of the UI
     :width: 30%

Selecting the "Power Up" Checkbox, will power up the sensor, and unselecting it will power it off.
Selecting the "Data Transmission" checkbox will make the Altimeter transmit the data through the wireline, while it unselects the "Data Transmission" checkbox of the Profiling Sonar.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Collision Avoidance Camera
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Collision Avoidance Camera has the following configuration parameters:

  - The serial port from where it is receiving data.
  - The Power Up checkbox.
  - The Data transmission checkbox.

  .. figure:: ../source/camera.png
     :alt: Current aspect of the UI
     :width: 30%

Selecting the "Power Up" Checkbox, will power up the sensor, and unselecting it will power it off.

~~~~~~~~~~~~~~~~~~~~~~
Sonar Altimeter
~~~~~~~~~~~~~~~~~~~~~~

.. figure:: ../source/winch.png
   :alt: winch
   :width: 30%

This sets the configuration to the winch which provides the depth information shown on the center of the gui.
It only requires to set the port, which never will be the same as that of the profiler and the altimeter.
Normally, it will be /dev/ttyUSB1



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Recording Profiling Sonar data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since it is required from the project not only displaying the data during the deployment, but also saving it for latter visualization, a Record Point Cloud button has been implemented.

.. figure:: ../source/recordbutton.png
   :alt: Current aspect of the UI
   :width: 50%

   Left: Record button while not recording. Right: record button while recording.

This button works as follows:

- When NOT recording, the "RECORD" text appears in the button. This means that it is waiting for a recording request.
- After pushing the button, the "STOP RECORD" text will appear, which means that it is recording the file and waiting for a stop recording request.

The file will be saved in .ply format in the Documents folder, with the file being named with the current date and time according to the following format: YYYY-MM-DD-HH-MM-SS.ply

The software recommended to open this files is `CloudCompare <https://www.danielgm.net/cc//>`_,which, apart from visualization, provides many processing capabilities.


--------------------
RViz Window
--------------------
Rviz is a ROS generic visualizator for robots and sensor data.
Here we will use it for Point Cloud visualization in 3D.
The 2D data from the Profiling Sonar is fused with the depth information from the whinch
to form the 3D point cloud with a waterfall display.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Configuration for Profiling Sonar Visualization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*This step only needs to be done once.*


----------------------
rqt reconfigure window
-----------------------



**********************************
Code Explanation
**********************************
The code is structured in classes.
Each class accomplishes a determined task, and has the necessary variables and methods (functions).

The main class is the Window definition class, where the window with all its elements are created
and placed in the correct position, and also the buttons are connected with the required functions.

========================================
Window Definition
========================================

The main aspect for the GUI development, is creating the window that contains all the controllers and
visualizers. Each of them needs a callback function that reads the data input or sends the command.

.. figure:: ../source/gui.png
   :alt: Current aspect of the UI
   :width: 100%

   ROV tab of the STAMS' GUI in simulator mode.

.. autoclass:: rpim.Window
   :members:

========================================
Serial Data Switch Parameters
========================================

The Sensors from the Profiler and Collision Avoidance Sub-Module are all sending information through the same wireline, and thus,
they cannot transmit information concurrently. A Serial Data Switch has been placed between the PCAS and the computer so the user
is able to select with which sensor from the PCAS wants to communicate.


.. autoclass:: rpim.SDS_Params
   :members:


========================================
Image processing
========================================

The camera data is sent through a ROS topic with the sensor_msgs/Image format, so it is necessary
to convert it to a matrix format to make it readable from an external module like it is the case
of the GUI. This is done via Opencv using ``CvBridge``

.. figure:: ../source/cvbridge.png
   :alt: conversion from ROS Image message to OpenCV matrix
   :align: center
   :width: 80%

   conversion from ROS Image message to OpenCV matrix (see `ROS wiki)
   <http://wiki.ros.org/cv_bridge/Tutorials/UsingCvBridgeToConvertBetweenROSImagesAndOpenCVImages>`_.

.. autoclass:: rpim.image_converter
   :members:

========================================
Pose information
========================================

The pose information is very important to collect as it is used for stamping of the different
measurements with the pose info. The pose information comes from the Geo-Referencing Sub-module.


.. figure:: ../source/pose.png
   :alt: pose
   :align: center
   :width: 80%

   Example of pose information used for 3D displaying of the device's trajectory

.. autoclass:: rpim.pose_subscriber
   :members:

========================================
GUI Joystick and Navigation Buttons
========================================

Although the AUV is meant to be autonomous or operated with a joystick, an additional joystick has beed added to the GUI for those cases when the AUV needs to be teleoperated but there is not a physical joystick available.


.. figure:: ../source/joystick.png
   :alt: Joystick
   :align: center
   :width: 80%

   Joystick and buttons from the GUI for teleoperation of the AUV. The joystick allows to move the AUV in front, left and right directions. The UP/DOWN buttons move the AUV up and down in the Z axis. The other two buttons rotate the AUV in anti-clockwise and clockwise directions

.. autoclass:: rpim.Joystick_thread
   :members:

========================================
Dynamic Configuration
========================================

.. autoclass:: rpim.ParameterServer_Params
   :members:


========================================
Special Methods for 3D Display
========================================

.. autoclass:: rpim.MyGLView
  :members:

========================================
Valeport Altimeter Class
========================================
.. autoclass:: rpim.altimeter_subscriber
  :members:

========================================
Profiling Sonar Class
========================================
.. autoclass:: rpim.ProfilingSonar_PC
  :members:
